import hashlib, random
from hashlib import sha256
import secp256k1 as ice
import multiprocessing
from multiprocessing import pool, Event, Process, Queue, Value, cpu_count
import random, codecs, time, sys, atexit
from time import sleep
from rich.console import Console
console = Console()
console.clear()

W  = '\033[0m'  # white (normal)
R  = '\033[31m' # red
G  = '\033[32m' # green
O  = '\033[33m' # orange
B  = '\033[34m' # blue
P  = '\033[35m' # purple

my_colours = [W, R, G, O, B, P]

icons= ['‚è≥', '‚ÑπÔ∏è', '‚úÖ', '‚õîÔ∏è', 'üîÅ', 'üîë', 'üí∏', 'üòî', 'üåç', '‚úçÔ∏è', 'üöå', 'üëá', 'üìã', 'üì£', 'ü§©','üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'ü•≤', '‚ò∫Ô∏è', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü•∏', 'ü§©', 'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨', 'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó', 'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ', 'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà', 'üëø', 'üëπ', 'üë∫', 'ü§°', 'üí©', 'üëª', 'üíÄ', '‚ò†Ô∏è', 'üëΩ', 'üëæ', 'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ', 'üëã', 'ü§ö', 'üñê', '‚úã', 'üññ', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶æ', 'ü¶µ', 'ü¶ø', 'ü¶∂', 'üë£', 'üëÇ', 'ü¶ª', 'üëÉ', 'ü´Ä', 'ü´Å', 'üß†', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅ', 'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'üêí', 'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'ü™±', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú', 'ü™∞', 'ü™≤', 'ü™≥', 'ü¶ü', 'ü¶ó', 'üï∑', 'üï∏', 'ü¶Ç', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ', 'ü¶ï', 'üêô', 'ü¶ë', 'ü¶ê', 'ü¶û', 'ü¶Ä', 'üê°', 'üê†', 'üêü', 'üê¨', 'üê≥', 'üêã', 'ü¶à', 'üêä', 'üêÖ', 'üêÜ', 'ü¶ì', 'ü¶ç', 'ü¶ß', 'ü¶£', 'üêò', 'ü¶õ', 'ü¶è', 'üê™', 'üê´', 'ü¶í', 'ü¶ò', 'ü¶¨', 'üêÉ', 'üêÇ', 'üêÑ', 'üêé', 'üêñ', 'üêè', 'üêë', 'ü¶ô', 'üêê', 'ü¶å', 'üêï', 'üê©', 'ü¶Æ', 'üêï‚Äçü¶∫', 'üêà', 'üêà‚Äç‚¨õ', 'ü™∂', 'üêì', 'ü¶É', 'ü¶§', 'ü¶ö', 'ü¶ú', 'ü¶¢', 'ü¶©', 'üïä', 'üêá', 'ü¶ù', 'ü¶®', 'ü¶°', 'ü¶´', 'ü¶¶', 'ü¶•', 'üêÅ', 'üêÄ', 'üêø', 'ü¶î', 'üêæ', 'üêâ', 'üê≤', 'üåµ', 'üéÑ', 'üå≤', 'üå≥', 'üå¥', 'ü™µ', 'üå±', 'üåø', '‚òòÔ∏è', 'üçÄ', 'üéç', 'ü™¥', 'üéã', 'üçÉ', 'üçÇ', 'üçÅ', 'üçÑ', 'üêö', 'ü™®', 'üåæ', 'üíê', 'üå∑', 'üåπ', 'ü•Ä', 'üå∫', 'üå∏', 'üåº', 'üåª', 'üåû', 'üåù', 'üåõ', 'üåú', 'üåö', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåë', 'üåí', 'üåì', 'üåî', 'üåô', 'üåé', 'üåç', 'üåè', 'ü™ê', 'üí´', '‚≠êÔ∏è', 'üåü', '‚ú®', '‚ö°Ô∏è', '‚òÑÔ∏è', 'üí•', 'üî•', 'üå™', 'üåà', '‚òÄÔ∏è', 'üå§', '‚õÖÔ∏è', 'üå•', '‚òÅÔ∏è', 'üå¶', 'üåß', '‚õà', 'üå©', 'üå®', '‚ùÑÔ∏è', '‚òÉÔ∏è', '‚õÑÔ∏è', 'üå¨', 'üí®', 'üíß', 'üí¶', '‚òîÔ∏è', '‚òÇÔ∏è', 'üåä', 'üå´', '‚è∞', 'üí∞', 'üéÖüèª', 'üéÑ', 'üéÅ', 'üé∂']

animation = ["‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è  0%","‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è  5%","‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 10%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 15%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 20%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 25%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 30%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 35%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 40%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 45%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 50%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 55%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 60%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 65%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 70%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 75%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 80%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 85%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è 90%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚ùÑÔ∏è 95%","‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è100%"]

for i in range(len(animation)):
    time.sleep(0.10)
    sys.stdout.write("\r" + "Merry Christmas:" + animation[i % len(animation)])
    sys.stdout.flush()
console.print("\n[yellow]üí∞-----------------üí∞ HUNT4BITCOIN with Python üí∞----------------------üí∞[/yellow]")
console.print("[yellow]   ü§ñü§ñü§ñ Made by Mizogg  with help from –ú–∏—Ö–∞–∏–ª –•.XopMC  https://github.com/XopMC ü§ñü§ñü§ñ[/yellow]")
console.print("[yellow]    ü§© With iceland2k14 secp256k1 https://github.com/iceland2k14/secp256k1  ü§© [/yellow]")
console.print("[yellow]üí∞-----------------üí∞ HUNT4BITCOIN with Python üí∞----------------------üí∞[/yellow]")
console.print("[purple]         ‚è≥Starting search... Please Wait ‚è≥[/purple]")
print('Bitcoin Addresses Loading Please Wait: ')
filename ='puzzle.txt'
with open(filename) as f:
    line_count = 0
    for line in f:
        line != "\n"
        line_count += 1
with open(filename) as file:
    add = file.read().split()
add = set(add)
print('Total Bitcoin Addresses Loaded and Checking : ',str (line_count))
console.print("[yellow] ‚ÑπÔ∏è Start search... Pick Range to start (Min=0 Max=256) ‚ÑπÔ∏è [/yellow] ")
x=int(input(" ‚úÖ Start range in BITs (Puzzle StartNumber) ‚úçÔ∏è -> "))
a = 2**x
y=int(input(" ‚õîÔ∏è Stop range Max in BITs (Puzzle StopNumber)‚úçÔ∏è -> "))
b = 2**y
console.print("[purple]‚è≥Starting search... Please Wait ‚è≥[/purple]")
console.print("==========================================================")


base58_alphabet = b'123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

def b58encode_int(x, default_one=True):
    if not x and default_one:
        return base58_alphabet[0:1]
    base = len(base58_alphabet)
    string = b''
    while x:
        x, remainder = divmod(x, base)
        string = base58_alphabet[remainder:remainder+1] + string
    return string

def b58encode(x):
    old_len = len(x)
    x = x.lstrip(b'\0')
    new_len = len(x)
    acc = int.from_bytes(x, byteorder='big')
    result = b58encode_int(acc, default_one=False)
    return base58_alphabet[0:1] * (old_len - new_len) + result

def b58encode_check(x):
    digest = sha256(sha256(x).digest()).digest()
    return b58encode(x + digest[:4])

def main(counter):
    count = 0
    total = 0
    st = time.time()
    sleep(0.00001)
    while True:
        with counter.get_lock():
            counter.value += 1
        count += 1
        total += 4
        ran=random.randrange(a,b)
        seed = str(ran)
        HEX = "%064x" % ran
        private_key_hex_px = '80' + HEX
        x = sha256(bytes.fromhex(private_key_hex_px)).hexdigest()
        x = sha256(bytes.fromhex(x)).hexdigest()
        checksum = x[:8]
        private_key_hex_px_cs = private_key_hex_px + checksum
        private_key_WIF = b58encode(bytes.fromhex(private_key_hex_px_cs)).decode("utf-8")
        private_key_hex_compressed_px = '80' + HEX + '01'
        x = sha256(bytes.fromhex(private_key_hex_compressed_px)).hexdigest()
        x = sha256(bytes.fromhex(x)).hexdigest()
        checksumc = x[:8]
        private_key_hex_compressed_px_cs = private_key_hex_compressed_px + checksumc
        private_key_WIF_compressed = b58encode(bytes.fromhex(private_key_hex_compressed_px_cs)).decode("utf-8")
        caddr = ice.privatekey_to_address(0, True, int(seed)) #Compressed
        uaddr = ice.privatekey_to_address(0, False, int(seed))  #Uncompressed
        P2SH = ice.privatekey_to_address(1, True, int(seed)) #p2sh
        BECH32 = ice.privatekey_to_address(2, True, int(seed))  #bech32
        speed = round(counter.value/(time.time() - st))

        if caddr in add or uaddr in add or P2SH in add or BECH32 in add :
            print('\nMatch Found')
            print('\nPrivatekey (dec): ', seed,'\nPrivatekey (hex): ', HEX, '\nPrivatekey Uncompressed: ', private_key_WIF, '\nPrivatekey compressed: ', private_key_WIF_compressed, '\nPublic Address 1 Uncompressed: ', uaddr, '\nPublic Address 1 Compressed: ', caddr, '\nPublic Address 3 P2SH: ', P2SH, '\nPublic Address bc1 BECH32: ', BECH32)
            
            f=open("winner.txt","a")
            f.write('\nPrivatekey (dec): ' + seed)
            f.write('\nPrivatekey (hex): ' + HEX)
            f.write('\nPrivatekey Uncompressed: ' + private_key_WIF)
            f.write('\nPrivatekey compressed: ' + private_key_WIF_compressed)
            f.write('\nPublic Address 1 Compressed: ' + caddr)
            f.write('\nPublic Address 1 Uncompressed: ' + uaddr)
            f.write('\nPublic Address 3 P2SH: ' + P2SH)
            f.write('\nPublic Address bc1 BECH32: ' + BECH32)
            f.write('\n =====Made by mizogg.co.uk Donations 3P7PZLbwSt2bqUMsHF9xDsaNKhafiGuWDB =====' ) 
            f.close()
            for i in range(len(animation)):
                time.sleep(0.10)
                sys.stdout.write("\r" + "Merry Christmas:" + animation[i % len(animation)])
                sys.stdout.flush()
        else:
            print('Scan Number : ', str(count), ' : Total Checked : ', str(total), ' : Keys/s : ', str(speed), end='\r')

if __name__ == '__main__':
    counter = Value('L')
    sleep(0.05)
    main(counter)
